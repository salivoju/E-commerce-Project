
services:
  # =============================================================================
  # DATABASES (Your existing setup - keeping it as is)
  # =============================================================================

  # User Service Database
  user-db:
    image: postgres:15
    container_name: user-service-db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5432:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d user_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Product Service Database
  product-db:
    image: postgres:15
    container_name: product-service-db
    environment:
      POSTGRES_DB: product_service_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5433:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d product_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Order Service Database
  order-db:
    image: postgres:15
    container_name: order-service-db
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5434:5432"
    volumes:
      - order_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d order_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Cart Service Database
  cart-db:
    image: postgres:15
    container_name: cart-service-db
    environment:
      POSTGRES_DB: cart_service_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5435:5432"
    volumes:
      - cart_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d cart_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Inventory Service Database
  inventory-db:
    image: postgres:15
    container_name: inventory-service-db
    environment:
      POSTGRES_DB: inventory_service_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5436:5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d inventory_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # =============================================================================
  # MICROSERVICES (New additions)
  # =============================================================================

  # Discovery Server (Eureka) - Must start first
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # API Gateway - Starts after Discovery Server
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_service_db
      - SPRING_DATASOURCE_USERNAME=ecommerce_user
      - SPRING_DATASOURCE_PASSWORD=ecommerce_pass
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      user-db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/users/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Product Catalog Service
  product-catalog-service:
    build:
      context: ./product-catalog-service
      dockerfile: Dockerfile
    container_name: product-catalog-service
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/product_service_db
      - SPRING_DATASOURCE_USERNAME=ecommerce_user
      - SPRING_DATASOURCE_PASSWORD=ecommerce_pass
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      product-db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Inventory Service
  inventory-service:
    build:
      context: ./Inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8094:8094"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://inventory-db:5432/inventory_service_db
      - SPRING_DATASOURCE_USERNAME=ecommerce_user
      - SPRING_DATASOURCE_PASSWORD=ecommerce_pass
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      inventory-db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/api/v1/inventory/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Cart Service - Depends on Product and Inventory services
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    ports:
      - "8093:8093"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cart-db:5432/cart_service_db
      - SPRING_DATASOURCE_USERNAME=ecommerce_user
      - SPRING_DATASOURCE_PASSWORD=ecommerce_pass
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      cart-db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      product-catalog-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/api/v1/cart/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Order Service - Depends on Product and Inventory services
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8092:8092"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/order_service_db
      - SPRING_DATASOURCE_USERNAME=ecommerce_user
      - SPRING_DATASOURCE_PASSWORD=ecommerce_pass
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      order-db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      product-catalog-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/api/v1/orders/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # =============================================================================
  # MANAGEMENT TOOLS (Your existing pgAdmin)
  # =============================================================================

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecommerce.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8888:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - user-db
      - product-db
      - order-db
      - cart-db
      - inventory-db
    networks:
      - ecommerce-network

# =============================================================================
# NETWORKS AND VOLUMES
# =============================================================================

networks:
  ecommerce-network:
    driver: bridge

volumes:
  user_data:
  product_data:
  order_data:
  cart_data:
  inventory_data:
  pgadmin_data: